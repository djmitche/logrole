// code generated by thespian; DO NOT EDIT

package utf8

// DataMailbox is a mailbox for messages of type []byte.
type DataMailbox struct {
	// C is the bidirectional channel over which messages will be transferred.  If
	// this is not set in the mailbox, a fresh channel will be created automatically.
	C chan []byte
	// Disabled, if set to true, causes the mailbox to start life disabled.
	Disabled bool
}

// ApplyDefaults applies default settings to this Data, if
// the struct has its zero value.
func (mbox *DataMailbox) ApplyDefaults() {
	if mbox.C == nil {
		mbox.C = make(chan []byte, 10) // default channel size
	}
}

// Tx creates a DataTx for this mailbox
func (mbox *DataMailbox) Tx() DataTx {
	return DataTx{
		C: mbox.C,
	}
}

// Rx creates a DataRx for this mailbox
func (mbox *DataMailbox) Rx() DataRx {
	return DataRx{
		C:        mbox.C,
		Disabled: mbox.Disabled,
	}
}

// DataTx sends to a mailbox for messages of type []byte.
type DataTx struct {
	C chan<- []byte
}

// DataRx receives from a mailbox for messages of type []byte.
type DataRx struct {
	C <-chan []byte
	// Disabled, if set to true, will disable receipt of messages from this mailbox.
	Disabled bool
}

// Chan gets a channel for this mailbox, or nil if there is nothing to select from.
func (rx *DataRx) Chan() <-chan []byte {
	if rx.Disabled {
		return nil
	}
	return rx.C
}
