// code generated by thespian; DO NOT EDIT

package common

// MessageMailbox is a mailbox for messages of type Message.
type MessageMailbox struct {
	// C is the bidirectional channel over which messages will be transferred.  If
	// this is not set in the mailbox, a fresh channel will be created automatically.
	C chan Message
	// Disabled, if set to true, causes the mailbox to start life disabled.
	Disabled bool
}

// ApplyDefaults applies default settings to this Message, if
// the struct has its zero value.
func (mbox *MessageMailbox) ApplyDefaults() {
	if mbox.C == nil {
		mbox.C = make(chan Message, 10) // default channel size
	}
}

// Tx creates a MessageTx for this mailbox
func (mbox *MessageMailbox) Tx() MessageTx {
	return MessageTx{
		C: mbox.C,
	}
}

// Rx creates a MessageRx for this mailbox
func (mbox *MessageMailbox) Rx() MessageRx {
	return MessageRx{
		C:        mbox.C,
		Disabled: mbox.Disabled,
	}
}

// MessageTx sends to a mailbox for messages of type Message.
type MessageTx struct {
	C chan<- Message
}

// MessageRx receives from a mailbox for messages of type Message.
type MessageRx struct {
	C <-chan Message
	// Disabled, if set to true, will disable receipt of messages from this mailbox.
	Disabled bool
}

// Chan gets a channel for this mailbox, or nil if there is nothing to select from.
func (rx *MessageRx) Chan() <-chan Message {
	if rx.Disabled {
		return nil
	}
	return rx.C
}
